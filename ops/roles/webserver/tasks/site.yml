---
- name: Set up site directory structure
  file: path="/var/www/{{ item }}" state=directory
        owner=www-data group=www-pub mode=0775
  with_items:
    - "{{ site_name }}/"
    - "{{ site_name }}/auth/"
    - "{{ site_name }}/email/"
    - "{{ site_name }}/site_media/media/"

- name: Set up static directory and permissions
  file: path="/var/www/site_media/static/" state=directory
        owner=www-data group=www-pub mode=0775 recurse=yes


# PostgreSQL Setup
- name: Create site postgresql database
  postgresql_db: name={{ site_name }} encoding="UTF8"
                 lc_collate="en_US.UTF-8" lc_ctype="en_US.UTF-8"
                 template=template0
  become: yes
  become_user: postgres

- name: Add database extensions
  shell: "psql {{ site_name }} -c 'CREATE EXTENSION IF NOT EXISTS {{ item }};'"
  become: yes
  become_user: postgres
  with_items:
    - hstore
    - postgis
    - postgis_topology

- name: Create site postgresql user
  postgresql_user: name={{ site_name }} password={{ site_name }}
                   db={{ site_name }} priv=ALL
  become: yes
  become_user: postgres

- name: Set postgresql user privileges
  postgresql_user: name={{ site_name }}
                   role_attr_flags=SUPERUSER,CREATEDB,NOCREATEROLE
  become: yes
  become_user: postgres


# PostgreSQL Backup
- name: Install database backup script
  template: src=postgresql/create_backup.py backup=yes
            dest=/var/lib/postgresql/create_{{ site_name }}_backup.py
            owner=postgres group=postgres mode=0744

- name: Create site postgresql backup directory
  file: path=/var/lib/postgresql/backups/{{ site_name }}
        owner=postgres group=postgres mode=0755
        state=directory

- name: Schedule database backup script
  cron: name="backup {{ site_name }} postgresql database"
        job="cd /var/lib/postgresql/ && ./create_{{ site_name }}_backup.py"
        minute="0" hour="0" user=postgres


# Nginx Setup
- name: Install site nginx config
  template: src=nginx/sites/{{ env }}.conf backup=yes
            dest=/etc/nginx/sites-available/{{ site_name }}
            owner=root group=root mode=0644
  register: site_nginx_config

- name: Enable site nginx config
  file: dest=/etc/nginx/sites-enabled/{{ site_name }}
        src=/etc/nginx/sites-available/{{ site_name }}
        state=link owner=root group=root mode=0644
  register: site_nginx_config_enabled

- name: Install python-passlib
  apt: name=python-passlib state=present
  when: site_auth_user is defined and site_auth_pass is defined

- name: Set up htpasswd file
  htpasswd: path=/var/www/{{ site_name }}/htpasswd state=present backup=yes
            name={{ site_auth_user }} password={{ site_auth_pass }}
            owner=www-data group=www-pub mode=0644
  when: site_auth_user is defined and site_auth_pass is defined

- name: Reload nginx
  service: name=nginx state=reloaded
  when: site_nginx_config.changed or site_nginx_config_enabled.changed


# Install project requirements and run db migrations
- name: Install python requirements in virtualenv
  pip: virtualenv=/var/www/envs/{{ site_name }}
       requirements={{ site_path }}requirements.txt
       extra_args="--exists-action=w"
  become_user: vagrant

- name: Add .project file for virtualenv
  template: src=project dest=/var/www/envs/{{ site_name }}/.project
            owner=www-data group=www-pub mode=0644

- name: Run migrations
  django_manage: command="migrate --noinput"
                 app_path=/var/www/{{ site_name }}/{{ site_name }}
                 virtualenv=/var/www/envs/{{ site_name }}


- name: Install web server upstart config
  template: src=upstart/web.conf dest=/etc/init/web.conf
            owner=root group=root mode=0644
  register: web_upstart_config

- name: Install worker upstart config
  template: src=upstart/worker.conf dest=/etc/init/worker.conf
            owner=root group=root mode=0644


- name: Start web server
  service: name=web state=started
  when: env != "development"

- name: Start worker
  service: name=worker state=started
  when: env != "development"
